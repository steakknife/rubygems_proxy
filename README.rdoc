= Rubygems Proxy

== To run on localhost

Just cd to the directory and use the command `rackup`

== Setting up

Clone this repository.

  $ git clone git://github.com/martinseener/rubygems_proxy.git

Afterwards set the permissions correctly

  chmod -R 777 /var/www/rubygems_proxy/
  chmod 644 /var/www/rubygems_proxy/public/.htaccess

Set up Apache + Passenger or something similar.

  <VirtualHost *:80>
    ServerName rubygems.org
    DocumentRoot /var/www/rubygems_proxy/public

    <Directory /var/www/rubygems_proxy>
      AllowOverride all
      Options -MultiViews
    </Directory>
  </VirtualHost>

If you want to run everything encrypted you can use SSL-Enabled Variant and changing the gem sources (Only DNS is not enough
for this solution since default gem sources is "http://rubygems..."!)

  <VirtualHost *:443>
    ServerName rubygems.org
    DocumentRoot /var/www/rubygems_proxy/public

    SSLEngine On
    SSLCertificateFile /etc/apache2/ssl/server.crt
    SSLCertificateKeyFile /etc/apache2/ssl/server.key

    <Directory /var/www/rubygems_proxy>
      AllowOverride all
      Options -MultiViews
    </Directory>
  </VirtualHost>

Update gem sources accordingly

  gem sources -r "http://rubygems.org"
  gem sources -a "https://rubygems.org"
  gem update (--system)

=== Setup using global DNS (recommended)

In your local DNS (Firewall, Bind, Router) or in /etc/hosts add a Static Entry like

  <IP_of_the_Proxy> rubygems.org

...for example

  10.10.10.5 rubygems.org

Now every call goes to the proxy automatically - without modifying your local gem sources
like described below.

This method is recommended because it handles the default setting which uses "http://rubygems.org"
as the Gem-Server. It fits seamlessly in your environment, even if you had no proxy before!

=== Setup using modification of the gem sources

Add the following line to your Gemfile:
  
  source "gem-proxy"

And change your ~/.gemrc to something like this:

  ---
  :sources:
  - gem-proxy.org 
  gem: --no-rdoc --no-ri

Now, if you do a normal <tt>bundle install</tt> or <tt>gem install</tt> rubygems will ask rubygems.org-proxy first. rubygems.org-proxy will return the gem if it exists in the cache, or find it on rubygems.org if the gem isn't there.
	
The result is a transparent mirror of the official rubygems site on a server of your choosing. This can be really helpful if, for example, the geographic distance between you and the official gem repository makes the connection slow. Or if you are in a location where parts of the internet are blocked or rubygems.org is just offline. Set this server up in a location you can access, and provided that the server has access to the greater internet, you can access rubygems through the proxy.

= Maintainer & Special Thanks

* Martin Seener - http://martin.seener.de

Special Thanks goes out to fnando on github for the inital rubygems_proxy version and then Guangzhou Ruby User Group for the enhancements afterwards.

= Known Issues

- When the Proxy has no Connection to the Internet or production.cf.rubygems.org, the install will most likely fail due to the missing (latest_)specs.4.8.gz file which is not cached when its reachable. Local caching/updating when its available and storing when internet or website is down will be implemented soon.
  - Manual Workaround: Download them manually and store them both in the public/ folder

== License

(The MIT License)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
